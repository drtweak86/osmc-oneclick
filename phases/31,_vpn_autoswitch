#!/usr/bin/env bash
set -euo pipefail

# ========= Config (overridable via /etc/default/wg-autoswitch) =========
MIN_DL_MBIT=${MIN_DL_MBIT:-12}          # minimum download to be "streaming-ready"
MAX_RTT_MS=${MAX_RTT_MS:-80}            # max acceptable average RTT (ms)
MAX_LOSS_PCT=${MAX_LOSS_PCT:-2}         # max acceptable packet loss (%)
TEST_BYTES=${TEST_BYTES:-4194304}       # ~4 MiB test payload
PING_TARGET=${PING_TARGET:-1.1.1.1}     # ping target through tunnel
LOG_FILE=${LOG_FILE:-/var/log/wg-autoswitch.log}

# Candidate download URLs (we try in order until one works)
TEST_URLS=(
  "https://speed.cloudflare.com/__down?bytes=${TEST_BYTES}"
  "https://ipv4.download.thinkbroadband.com/5MB.zip"
  "https://speed.hetzner.de/10MB.bin"
)

# Load admin overrides if present
if [ -f /etc/default/wg-autoswitch ]; then
  # shellcheck disable=SC1091
  . /etc/default/wg-autoswitch
fi

# Discover profiles if not set: basenames of /etc/wireguard/*.conf
if [ -z "${PROFILES:-}" ]; then
  mapfile -t _found < <(find /etc/wireguard -maxdepth 1 -type f -name '*.conf' -printf '%f\n' 2>/dev/null | sed 's/\.conf$//' | sort)
  if [ "${#_found[@]}" -gt 0 ]; then
    PROFILES="${_found[*]}"
  else
    # sensible default set
    PROFILES="de-ber nl-ams uk-lon uk-man us-nyc"
  fi
fi

# ========= Utilities =========
log() {
  # Always echo to stdout for journal, and also append to LOG_FILE if set
  local line="[oneclick][31_autoswitch] $*"
  echo -e "$line"
  if [ -n "${LOG_FILE:-}" ]; then
    mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null || true
    echo -e "$line" >>"$LOG_FILE" 2>/dev/null || true
  fi
}

fmt_ms() { case "$1" in (""|*[!0-9]*) echo "9999ms" ;; (*) echo "${1}ms" ;; esac; }

have_cmd() { command -v "$1" >/dev/null 2>&1; }

# Probe RTT (ms) and loss (%) through a specific interface using ping
probe_rtt() {
  local iface="$1" line loss avg rtt
  if have_cmd ping; then
    if line="$(ping -I "$iface" -c 3 -w 3 -n "$PING_TARGET" 2>/dev/null | tail -n2)"; then
      loss="$(printf '%s\n' "$line" | sed -n 's/.* \([0-9.]\+\)% packet loss.*/\1/p')"
      avg="$(printf '%s\n' "$line"  | sed -n 's/.*= \([0-9.]\+\)\/\([0-9.]\+\)\/.*/\2/p')"
      rtt="${avg%.*}"
      [ -z "$rtt" ] && rtt=9999
      [ -z "$loss" ] && loss=0
      printf '%s %s\n' "$rtt" "$loss"
      return 0
    fi
  fi
  # Fallback
  printf '9999 0\n'
}

# Measure download speed in Mbps via curl bound to the interface
probe_dl_mbps() {
  local iface="$1" url speed
  if ! have_cmd curl; then
    echo "0"
    return 0
  fi
  for url in "${TEST_URLS[@]}"; do
    # Speed is in bytes/sec; convert to Mbps
    speed="$(curl --silent --show-error --fail --max-time 10 --location \
      --interface "$iface" \
      --output /dev/null --write-out '%{speed_download}' "$url" 2>/dev/null || true)"
    if [[ "$speed" =~ ^[0-9.]+$ ]] && [ "$speed" != "0" ]; then
      # bytes/s -> bits/s -> Mbit/s
      awk -v bps="$speed" 'BEGIN{ printf "%.1f", (bps*8)/1000000 }'
      return 0
    fi
  done
  echo "0"
}

# Simple score: higher throughput is better; we emulate your ~98xx prints:
# score = 10000 - floor(dl_mbps * 2). We ignore RTT in score but gate with thresholds.
calc_score() {
  local dl="$1"
  awk -v dl="$dl" 'BEGIN{ s=int(10000 - (dl*2)); if (s<0) s=0; printf "%d", s }'
}

current_iface() {
  # First active wg interface, if any
  if have_cmd wg; then
    wg show interfaces 2>/dev/null | awk '{print $1}' | tr ' ' '\n' | sed '/^$/d' | head -n1
  fi
}

# Bring up a profile (wg-quick up), ensuring others are down
switch_to() {
  local target="$1" cur
  cur="$(current_iface || true)"
  if [ "$cur" = "$target" ]; then
    return 0
  fi
  # Down current (ignore errors)
  if [ -n "$cur" ]; then
    wg-quick down "$cur" >/dev/null 2>&1 || true
  fi
  # Up target
  wg-quick up "$target" >/dev/null 2>&1
}

# ========= Main =========

# Ensure we print current tunnel (if any)
CUR_IFACE="$(current_iface || true)"
if [ -n "$CUR_IFACE" ]; then
  log "Current tunnel: $CUR_IFACE"
fi

# If current exists, measure its metrics first
if [ -n "$CUR_IFACE" ]; then
  read -r cur_rtt cur_loss < <(probe_rtt "$CUR_IFACE")
  cur_dl="$(probe_dl_mbps "$CUR_IFACE")"
  cur_score="$(calc_score "$cur_dl")"
  log "  current metrics: avg=$(fmt_ms "$cur_rtt") loss=${cur_loss}% dl=${cur_dl}Mbps score=${cur_score}"
fi

# Evaluate all candidates
best_iface=""
best_rtt=9999
best_loss=100
best_dl="0.0"
best_score=10000

for p in $PROFILES; do
  # Skip profiles that have no config file at all
  if [ ! -f "/etc/wireguard/${p}.conf" ]; then
    continue
  fi

  # If the interface isn't up, quickly bring it up, sample, then bring it down.
  # Faster path: if already up (==CUR_IFACE) we just measure.
  was_up=0
  if ip link show "$p" >/dev/null 2>&1; then
    was_up=1
  else
    # Try to bring it up temporarily
    wg-quick up "$p" >/dev/null 2>&1 || true
  fi

  # Probe RTT/loss
  read -r rtt loss < <(probe_rtt "$p")
  log "  $p ping: avg=$(fmt_ms "$rtt") loss=${loss}%"

  # Throughput
  log "  $p throughput test: up…"
  dl="$(probe_dl_mbps "$p")"
  log "  $p throughput: dl=${dl}Mbps"

  # Score (lower better to match your earlier logs’ shape)
  score="$(calc_score "$dl")"
  log "  $p score=${score}"

  # Select best that is "streaming-ready" first; otherwise fall back to raw score
  ready=0
  if [ "$dl" != "0.0" ] && awk -v d="$dl" -v m="$MIN_DL_MBIT" 'BEGIN{ exit !(d+0>=m) }'; then
    if [ "$rtt" -le "$MAX_RTT_MS" ] && awk -v L="$loss" -v M="$MAX_LOSS_PCT" 'BEGIN{ exit !(L+0<=M) }'; then
      ready=1
    fi
  fi

  # Track best according to readiness then score
  if [ "$ready" -eq 1 ]; then
    # Prefer any ready over non-ready; for ready ones pick the lowest score
    if [ -z "$best_iface" ] || [ "$best_ready" -eq 0 ] || [ "$score" -lt "$best_score" ]; then
      best_iface="$p"; best_rtt="$rtt"; best_loss="$loss"; best_dl="$dl"; best_score="$score"; best_ready=1
    fi
  else
    # Only consider if we don't have a ready candidate yet
    if [ -z "${best_iface:-}" ] || [ "${best_ready:-0}" -eq 0 -a "$score" -lt "$best_score" ]; then
      best_iface="$p"; best_rtt="$rtt"; best_loss="$loss"; best_dl="$dl"; best_score="$score"; best_ready=0
    fi
  fi

  # Tear down temporary interface if we brought it up
  if [ "$was_up" -eq 0 ] && [ "$p" != "$CUR_IFACE" ]; then
    wg-quick down "$p" >/dev/null 2>&1 || true
  fi
done

# No candidate? bail gracefully
if [ -z "$best_iface" ]; then
  log "No candidate WireGuard profiles found; nothing to do."
  exit 0
fi

# Announce decision
log "Connecting to best: ${best_iface}  (avg=$(fmt_ms "$best_rtt") loss=${best_loss}% dl=${best_dl}Mbps score=${best_score})"

# Switch if needed
if [ -z "$CUR_IFACE" ] || [ "$CUR_IFACE" != "$best_iface" ]; then
  switch_to "$best_iface"
fi

# Print a wg summary of the active tunnel (similar to what you had in logs)
if have_cmd wg; then
  # shellcheck disable=SC2005
  echo "$(wg show "$best_iface")" | sed 's/^/    /'
fi

exit 0
