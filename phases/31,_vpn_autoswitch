#!/usr/bin/env bash
set -euo pipefail
log(){ echo "[oneclick][31_autoswitch] $*" | tee -a "$LOG"; }

CONF_DIR="/etc/wireguard"
LOG="/var/log/wg-autoswitch.log"
TEST_URL="https://speed.cloudflare.com/__down?bytes=2000000"  # ~2MB quick probe
MAX_SECS=6    # hard cap for each probe
COOLDOWN=1    # small pause between hops

mkdir -p "$(dirname "$LOG")"
: > "$LOG"

log "Starting VPN auto-switch check (streaming-aware: TCP RTT + TTFB + DL rate)"

best_conf=""
best_score=999999

# bring ALL existing tunnels down first (clean slate)
for ifc in $(wg show interfaces 2>/dev/null || true); do
  wg-quick down "$ifc" || true
done

for conf in "$CONF_DIR"/*.conf; do
  [ -e "$conf" ] || continue
  name=$(basename "${conf%.conf}")
  log "Testing $name …"
  # bring the tunnel up
  if ! wg-quick up "$name" >>"$LOG" 2>&1; then
    log "  ! failed to bring up $name"
    continue
  fi

  # Give routing/DNS a split second to settle
  sleep 0.5

  # Measure TCP connect, TTFB and throughput through the tunnel
  read -r t_conn t_ttfb spd_dl <<<"$(curl -m "$MAX_SECS" -s -o /dev/null \
    -w '%{time_connect} %{time_starttransfer} %{speed_download}' "$TEST_URL" || echo "9e9 9e9 0")"

  # Convert to ms and Mbps
  rtt_ms=$(awk -v t="$t_conn" 'BEGIN{printf("%.0f", t*1000)}')
  ttfb_ms=$(awk -v t="$t_ttfb" 'BEGIN{printf("%.0f", t*1000)}')
  mbps=$(awk -v bps="$spd_dl" 'BEGIN{printf("%.1f", bps/1000000)}')

  # Score: lower is better
  rtt_cap=$(( rtt_ms > 500 ? 500 : rtt_ms ))
  ttfb_cap=$(( ttfb_ms > 1000 ? 1000 : ttfb_ms ))
  dl_penalty=$(awk -v m="$mbps" 'BEGIN{cap=(m>100?100:m); printf("%.0f", (100-cap)*5) }')

  score=$(( rtt_cap*40/100 + ttfb_cap*30/100 + dl_penalty*30/100 ))

  log "  metrics: rtt=${rtt_ms}ms ttfb=${ttfb_ms}ms dl=${mbps}Mbps  -> score=${score}"

  # tear down before next test
  wg-quick down "$name" >>"$LOG" 2>&1 || true
  sleep "$COOLDOWN"

  if (( score < best_score )); then
    best_score=$score
    best_conf=$name
  fi
done

if [ -z "$best_conf" ]; then
  log "No valid VPN configs tested successfully."
  exit 1
fi

log "Best endpoint: ${best_conf} (score=${best_score})"
wg-quick up "$best_conf" >>"$LOG" 2>&1 || true

ip4=$(ip -4 -o addr show dev "$best_conf" 2>/dev/null | awk '{print $4}' | cut -d/ -f1)
[ -z "${ip4:-}" ] && ip4="(no ip yet)"

kodi-send --action="Notification(VPN,Connected: ${best_conf} • IP: ${ip4} • score=${best_score},60000)" >/dev/null 2>&1 || true

wg show >>"$LOG" 2>&1 || true
